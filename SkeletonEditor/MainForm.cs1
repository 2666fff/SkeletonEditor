using System;
using System.Drawing;
using System.IO;
using System.Text.Json;
using System.Windows.Forms;
using Timer = System.Windows.Forms.Timer;

namespace SkeletonEditor
{
    public class AppSettings
    {
        public string FilePath { get; set; } = "";
        public string XOffset { get; set; } = "0";
        public string YOffset { get; set; } = "-260";
        public string Scale { get; set; } = "1.0";
    }

    public class MainForm : Form
    {
        private TextBox txtFilePath;
        private TextBox txtXOffset;
        private TextBox txtYOffset;
        private TextBox txtScale;
        private Label lblStatus;
        private AppSettings settings;
        private float originalXOffset;
        private float originalYOffset;
        private float originalScaleX;
        private float originalScaleY;
        private string currentFilePath;

        private readonly string settingsPath = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
            "SkeletonEditorSettings.json");

        public MainForm()
        {
            InitializeComponent();
            this.AllowDrop = true; // Form level drag drop setting
            LoadSettings();
            SetupUI();

            this.DragEnter += MainForm_DragEnter; // Form level drag enter
            this.DragDrop += MainForm_DragDrop; // Form level drag drop

            // Enable dragging files into the txtFilePath TextBox
            txtFilePath.AllowDrop = true;
            txtFilePath.DragEnter += TxtFilePath_DragEnter; // TextBox level drag enter
            txtFilePath.DragDrop += TxtFilePath_DragDrop; // TextBox level drag drop
        }

        // Form level DragEnter event
        private void MainForm_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.Copy; // Allow copying of files
            }
            else
            {
                e.Effect = DragDropEffects.None; // Block any other drag effects
            }
        }

        // Form level DragDrop event
        private void MainForm_DragDrop(object sender, DragEventArgs e)
        {
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length > 0)
            {
                string path = files[0];
                if (Directory.Exists(path) ||
                    Path.GetExtension(path).Equals(".skel", StringComparison.OrdinalIgnoreCase))
                {
                    txtFilePath.Text = path;
                    lblStatus.Text = "已加载: " + (Directory.Exists(path) ? "文件夹" : Path.GetFileName(path));
                    lblStatus.ForeColor = Color.FromArgb(39, 174, 96);
                    txtYOffset.Text = "-260"; // Default Y-offset value

                    // 如果是单个文件，读取骨骼信息
                    if (File.Exists(path) &&
                        Path.GetExtension(path).Equals(".skel", StringComparison.OrdinalIgnoreCase))
                    {
                        ReadSkeletonFile(path);
                    }
                }
                else
                {
                    lblStatus.Text = "错误: 只支持文件夹或.skel文件";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                }
            }
        }

        // TextBox DragEnter event (allow files to be dropped into the TextBox)
        private void TxtFilePath_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.Copy; // Allow copying of files
            }
            else
            {
                e.Effect = DragDropEffects.None; // Block any other drag effects
            }
        }

        // TextBox DragDrop event (handle dropped files)
        private void TxtFilePath_DragDrop(object sender, DragEventArgs e)
        {
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length > 0)
            {
                string path = files[0];
                if (Directory.Exists(path) ||
                    Path.GetExtension(path).Equals(".skel", StringComparison.OrdinalIgnoreCase))
                {
                    txtFilePath.Text = path;
                    lblStatus.Text = "已加载: " + (Directory.Exists(path) ? "文件夹" : Path.GetFileName(path));
                    lblStatus.ForeColor = Color.FromArgb(39, 174, 96);
                    txtYOffset.Text = "-260"; // Default Y-offset value

                    // 如果是单个文件，读取骨骼信息
                    if (File.Exists(path) &&
                        Path.GetExtension(path).Equals(".skel", StringComparison.OrdinalIgnoreCase))
                    {
                        ReadSkeletonFile(path);
                    }
                }
                else
                {
                    lblStatus.Text = "错误: 只支持文件夹或.skel文件";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                }
            }
        }

        private void LoadSettings()
        {
            try
            {
                if (File.Exists(settingsPath))
                {
                    string json = File.ReadAllText(settingsPath);
                    settings = JsonSerializer.Deserialize<AppSettings>(json) ?? new AppSettings();
                }
                else
                {
                    settings = new AppSettings();
                }
            }
            catch
            {
                settings = new AppSettings();
            }
        }

        private void SaveSettings()
        {
            try
            {
                settings.FilePath = txtFilePath.Text;
                settings.XOffset = txtXOffset.Text;
                settings.YOffset = txtYOffset.Text;
                settings.Scale = txtScale.Text;

                string json = JsonSerializer.Serialize(settings, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(settingsPath, json);
            }
            catch (Exception ex)
            {
                lblStatus.Text = "保存设置失败: " + ex.Message;
                lblStatus.ForeColor = Color.Red;
            }
        }

        private void SetupUI()
        {
            // 窗体设置 - 使用固定尺寸布局
            this.Text = "Skeleton Editor";
            this.Size = new Size((int)(800 * 1.5), (int)(450 * 1.5));
            this.StartPosition = FormStartPosition.CenterScreen;
            this.Font = new Font("微软雅黑", 10.5F, FontStyle.Regular, GraphicsUnit.Point);
            this.BackColor = Color.FromArgb(240, 245, 249);
            this.Padding = new Padding(20);
            this.FormClosing += (s, e) => SaveSettings(); // 保存设置

            // 主面板 - 固定尺寸
            Panel mainPanel = new Panel
            {
                Location = new Point(20, 20),
                Size = new Size(this.ClientSize.Width - 40, this.ClientSize.Height - 40),
                BackColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle,
                Padding = new Padding(25)
            };
            this.Controls.Add(mainPanel);

            // 标题
            Label titleLabel = new Label
            {
                Text = "骨架编辑器(当前仅验证过spine 3.4.02)",
                Font = new Font("微软雅黑", 16, FontStyle.Bold),
                AutoSize = true,
                Location = new Point(25, 25)
            };
            mainPanel.Controls.Add(titleLabel);

            // 文件选择框 - 使用加载的设置
            Label fileLabel = new Label
            {
                Text = "文件/文件夹路径:",
                Location = new Point(30, 80),
                Size = new Size(180, 30),
                TextAlign = ContentAlignment.MiddleLeft
            };

            txtFilePath = new TextBox
            {
                Location = new Point(220, 80),
                Size = new Size(mainPanel.Width - 350, 35),
                Font = new Font("微软雅黑", 10),
                Text = settings.FilePath
            };
            txtFilePath.AllowDrop = true;
            txtFilePath.DragEnter += TxtFilePath_DragEnter;
            txtFilePath.DragDrop += TxtFilePath_DragDrop;

            // 浏览按钮
            Button browseButton = new Button
            {
                Text = "浏览...",
                Location = new Point(txtFilePath.Right + 10, 80),
                Size = new Size(80, 35),
                Font = new Font("微软雅黑", 9),
                BackColor = Color.FromArgb(52, 152, 219),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat
            };
            browseButton.FlatAppearance.BorderSize = 0;
            browseButton.Click += BrowseButton_Click;

            // X轴附加偏移量 - 使用加载的设置
            Label xLabel = new Label
            {
                Text = "X轴附加偏移量:",
                Location = new Point(30, 150),
                Size = new Size(180, 30),
                TextAlign = ContentAlignment.MiddleLeft
            };

            txtXOffset = new TextBox
            {
                Location = new Point(220, 150),
                Size = new Size(150, 35),
                Font = new Font("微软雅黑", 10),
                Text = settings.XOffset
            };
            txtXOffset.KeyPress += IntegerInput_KeyPress;

            // Y轴附加偏移量 - 使用加载的设置，默认-260
            Label yLabel = new Label
            {
                Text = "Y轴附加偏移量:",
                Location = new Point(30, 220),
                Size = new Size(180, 30),
                TextAlign = ContentAlignment.MiddleLeft
            };

            txtYOffset = new TextBox
            {
                Location = new Point(220, 220),
                Size = new Size(150, 35),
                Font = new Font("微软雅黑", 10),
                Text = settings.YOffset
            };
            txtYOffset.KeyPress += IntegerInput_KeyPress;

            // 缩放附加 - 使用加载的设置
            Label scaleLabel = new Label
            {
                Text = "缩放附加(Scale):",
                Location = new Point(30, 290),
                Size = new Size(180, 30),
                TextAlign = ContentAlignment.MiddleLeft
            };

            txtScale = new TextBox
            {
                Location = new Point(220, 290),
                Size = new Size(150, 35),
                Font = new Font("微软雅黑", 10),
                Text = settings.Scale
            };
            txtScale.Leave += TxtScale_Leave;

            // 状态标签
            lblStatus = new Label
            {
                Location = new Point(30, 350),
                Size = new Size(mainPanel.Width - 60, 40),
                Font = new Font("微软雅黑", 10, FontStyle.Bold),
                ForeColor = Color.FromArgb(231, 76, 60),
                TextAlign = ContentAlignment.MiddleLeft
            };

            // 处理按钮
            Button processButton = new Button
            {
                Text = "开始处理",
                Location = new Point(550, 290),
                Size = new Size(160, 50),
                Font = new Font("微软雅黑", 12, FontStyle.Bold),
                BackColor = Color.FromArgb(46, 204, 113),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat
            };
            processButton.FlatAppearance.BorderSize = 0;
            processButton.Click += ProcessButton_Click;

            // 添加到主面板
            mainPanel.Controls.Add(fileLabel);
            mainPanel.Controls.Add(txtFilePath);
            mainPanel.Controls.Add(browseButton);
            mainPanel.Controls.Add(xLabel);
            mainPanel.Controls.Add(txtXOffset);
            mainPanel.Controls.Add(yLabel);
            mainPanel.Controls.Add(txtYOffset);
            mainPanel.Controls.Add(scaleLabel);
            mainPanel.Controls.Add(txtScale);
            mainPanel.Controls.Add(lblStatus);
            mainPanel.Controls.Add(processButton);
        }

        private void IntegerInput_KeyPress(object sender, KeyPressEventArgs e)
        {
            TextBox textBox = (TextBox)sender;
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) &&
                (e.KeyChar != '-' || textBox.SelectionStart != 0))
            {
                e.Handled = true;
            }

            if (e.KeyChar == '-' && textBox.Text.Contains("-"))
            {
                e.Handled = true;
            }
        }

        private void BrowseButton_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "骨架文件|*.skel|所有文件|*.*";
            openFileDialog.CheckFileExists = true;

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string path = openFileDialog.FileName;
                txtFilePath.Text = path;
                lblStatus.Text = "已选择文件: " + Path.GetFileName(path);
                lblStatus.ForeColor = Color.FromArgb(39, 174, 96);

                // 读取骨骼文件信息
                ReadSkeletonFile(path);
            }
        }

        private void ProcessButton_Click(object sender, EventArgs e)
        {
            lblStatus.Text = "处理中...";
            lblStatus.ForeColor = Color.FromArgb(41, 128, 185);

            // 获取用户输入的附加偏移量和缩放
            if (!int.TryParse(txtXOffset.Text, out int xOffsetAdd))
            {
                lblStatus.Text = "错误: X轴附加偏移量无效";
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                return;
            }

            if (!int.TryParse(txtYOffset.Text, out int yOffsetAdd))
            {
                lblStatus.Text = "错误: Y轴附加偏移量无效";
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                return;
            }

            if (!float.TryParse(txtScale.Text, out float scaleAdd))
            {
                lblStatus.Text = "错误: 缩放附加值无效";
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                return;
            }

            string path = txtFilePath.Text;

            if (string.IsNullOrEmpty(path))
            {
                lblStatus.Text = "错误: 请先选择文件或文件夹";
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                return;
            }

            try
            {
                if (File.Exists(path) && Path.GetExtension(path).Equals(".skel", StringComparison.OrdinalIgnoreCase))
                {
                    string backupDir = Path.Combine(Path.GetDirectoryName(path), "backup");
                    ProcessSkeletonFile(path, xOffsetAdd, yOffsetAdd, scaleAdd, backupDir);
                    lblStatus.Text = $"处理完成: {Path.GetFileName(path)}";
                }
                else if (Directory.Exists(path))
                {
                    string[] skelFiles = Directory.GetFiles(path, "*.skel", SearchOption.AllDirectories);
                    string backupRoot = Path.Combine(Directory.GetParent(path).FullName, "backup");
                    int count = 0;

                    foreach (var file in skelFiles)
                    {
                        ProcessSkeletonFile(file, xOffsetAdd, yOffsetAdd, scaleAdd, backupRoot, baseDir: path);
                        count++;
                    }

                    lblStatus.Text = $"处理完成: 共处理 {count} 个文件";
                }
                else
                {
                    lblStatus.Text = "错误: 路径无效";
                }

                lblStatus.ForeColor = Color.FromArgb(39, 174, 96);
                SaveSettings();
            }
            catch (Exception ex)
            {
                lblStatus.Text = "处理错误: " + ex.Message;
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
            }
        }

        private void TxtScale_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(txtScale.Text))
            {
                lblStatus.Text = "缩放值不能为空";
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                txtScale.Focus();
                return;
            }

            if (decimal.TryParse(txtScale.Text, out decimal scale))
            {
                if (scale <= 0 || scale >= 10)
                {
                    lblStatus.Text = "缩放值必须在0-10之间";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                    txtScale.Focus();
                }
                else
                {
                    // 格式化为两位小数
                    txtScale.Text = scale.ToString("0.##");
                    lblStatus.Text = "缩放值已更新";
                    lblStatus.ForeColor = Color.FromArgb(39, 174, 96);
                }
            }
            else
            {
                lblStatus.Text = "无效的缩放值";
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                txtScale.Focus();
            }
        }

        /// <summary>
        /// 读取骨骼文件并提取根骨骼(root)的位置和缩放信息
        /// </summary>
        private void ReadSkeletonFile(string filePath)
        {
            try
            {
                if (!File.Exists(filePath))
                {
                    lblStatus.Text = "错误: 文件不存在";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                    return;
                }

                // 读取文件内容
                byte[] fileBytes = File.ReadAllBytes(filePath);

                // 查找"root"字符串的位置
                int rootIndex = FindRootIndex(fileBytes);
                if (rootIndex == -1)
                {
                    lblStatus.Text = "错误: 未找到根骨骼(root)";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                    return;
                }

                // 根骨骼之后 +4 的位置开始读取数据
                int dataStartIndex = rootIndex + 8; // 跳过"root"的4个字节

                // 验证数据长度
                if (dataStartIndex + 16 > fileBytes.Length) // 需要16字节(4个float)
                {
                    lblStatus.Text = "错误: 文件格式不正确";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                    return;
                }

                // 读取X轴偏移量 (float, 大端序)
                originalXOffset = ReadBigEndianFloat(fileBytes, dataStartIndex);
                // 读取Y轴偏移量 (float, 大端序)
                originalYOffset = ReadBigEndianFloat(fileBytes, dataStartIndex + 4);
                // 读取X轴缩放 (float, 大端序)
                originalScaleX = ReadBigEndianFloat(fileBytes, dataStartIndex + 8);
                // 读取Y轴缩放 (float, 大端序)
                originalScaleY = ReadBigEndianFloat(fileBytes, dataStartIndex + 12);

                // 保存当前文件路径
                currentFilePath = filePath;

                lblStatus.Text =
                    $"已读取骨骼信息: X={originalXOffset:F2}, Y={originalYOffset:F2}, ScaleX={originalScaleX:F2}, ScaleY={originalScaleY:F2}";
                lblStatus.ForeColor = Color.FromArgb(39, 174, 96);
            }
            catch (Exception ex)
            {
                lblStatus.Text = "读取骨骼文件错误: " + ex.Message;
                lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
            }
        }

        /// <summary>
        /// 处理骨骼文件并备份原文件
        /// </summary>
        private void ProcessSkeletonFile(string filePath, int xOffsetAdd, int yOffsetAdd, float scaleAdd,
            string backupRoot, string baseDir = null)
        {
            try
            {
                // 构造备份路径（保留目录结构）
                string relativePath =
                    baseDir == null ? Path.GetFileName(filePath) : Path.GetRelativePath(baseDir, filePath);
                string backupPath = Path.Combine(backupRoot, relativePath);
                Directory.CreateDirectory(Path.GetDirectoryName(backupPath));

                if (File.Exists(backupPath))
                    File.Delete(backupPath);
                File.Copy(filePath, backupPath);

                // 读取并处理内容
                byte[] fileBytes = File.ReadAllBytes(filePath);
                int rootIndex = FindRootIndex(fileBytes);
                if (rootIndex == -1)
                {
                    lblStatus.Text = $"错误: 未找到根骨骼(root) - {Path.GetFileName(filePath)}";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                    return;
                }

                int dataStartIndex = rootIndex + 8;
                if (dataStartIndex + 16 > fileBytes.Length)
                {
                    lblStatus.Text = $"错误: 文件格式不正确 - {Path.GetFileName(filePath)}";
                    lblStatus.ForeColor = Color.FromArgb(231, 76, 60);
                    return;
                }

                float xOffset = ReadBigEndianFloat(fileBytes, dataStartIndex);
                float yOffset = ReadBigEndianFloat(fileBytes, dataStartIndex + 4);
                float scaleX = ReadBigEndianFloat(fileBytes, dataStartIndex + 8);
                float scaleY = ReadBigEndianFloat(fileBytes, dataStartIndex + 12);

                float newXOffset = xOffset + xOffsetAdd;
                float newYOffset = yOffset + yOffsetAdd;
                float newScaleX = scaleX * scaleAdd;
                float newScaleY = scaleY * scaleAdd;

                WriteBigEndianFloat(fileBytes, dataStartIndex, newXOffset);
                WriteBigEndianFloat(fileBytes, dataStartIndex + 4, newYOffset);
                WriteBigEndianFloat(fileBytes, dataStartIndex + 8, newScaleX);
                WriteBigEndianFloat(fileBytes, dataStartIndex + 12, newScaleY);

                File.WriteAllBytes(filePath, fileBytes);
            }
            catch (Exception ex)
            {
                throw new Exception($"处理文件 {Path.GetFileName(filePath)} 失败: {ex.Message}");
            }
        }

        /// <summary>
        /// 在字节数组中查找"root"的位置
        /// </summary>
        private int FindRootIndex(byte[] bytes)
        {
            // "root"的ASCII字节表示
            byte[] rootBytes = { 0x72, 0x6F, 0x6F, 0x74 }; // r=0x72, o=0x6F, o=0x6F, t=0x74

            // 遍历字节数组查找匹配项
            for (int i = 0; i <= bytes.Length - rootBytes.Length; i++)
            {
                bool match = true;
                for (int j = 0; j < rootBytes.Length; j++)
                {
                    if (bytes[i + j] != rootBytes[j])
                    {
                        match = false;
                        break;
                    }
                }

                if (match)
                {
                    return i;
                }
            }

            return -1; // 未找到
        }

        /// <summary>
        /// 从指定位置读取大端序的float值
        /// </summary>
        private float ReadBigEndianFloat(byte[] bytes, int startIndex)
        {
            // 大端序转小端序
            byte[] floatBytes = new byte[4];
            floatBytes[0] = bytes[startIndex + 3];
            floatBytes[1] = bytes[startIndex + 2];
            floatBytes[2] = bytes[startIndex + 1];
            floatBytes[3] = bytes[startIndex];

            return BitConverter.ToSingle(floatBytes, 0);
        }

        /// <summary>
        /// 将float值以大端序写入字节数组
        /// </summary>
        private void WriteBigEndianFloat(byte[] bytes, int startIndex, float value)
        {
            byte[] floatBytes = BitConverter.GetBytes(value);

            // 小端序转大端序
            bytes[startIndex] = floatBytes[3];
            bytes[startIndex + 1] = floatBytes[2];
            bytes[startIndex + 2] = floatBytes[1];
            bytes[startIndex + 3] = floatBytes[0];
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            SuspendLayout();
            // 
            // MainForm
            // 
            AllowDrop = true;
            ClientSize = new System.Drawing.Size(278, 244);
            ResumeLayout(false);
        }
    }

    internal static class Program
    {
        [STAThread]
        static void Main()
        {
            ApplicationConfiguration.Initialize();
            Application.Run(new MainForm());
        }
    }
}